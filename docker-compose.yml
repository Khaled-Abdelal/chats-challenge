version: '3.7'

services:
  proxy:
    build:
      context: ./nginx
    ports:
      - '8080:80'
    restart: 'unless-stopped'
    depends_on:
      - node_api
      - go_app
  
  db:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: chats-challange
    restart: always
    ports:
      - '3306:3306'
    healthcheck:
      test: "mysqladmin ping -h 127.0.0.1 -u root --password=password"
      interval: 30s
      timeout: 20s
      retries: 10
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 30s
      retries: 3
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
  elasticsearch:
    image: "elasticsearch:8.1.1"
    restart: always
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - action.auto_create_index=true
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
  node_api:
    build:
      context: ./nodeApp
      target: development-build-stage
      dockerfile: Dockerfile
    command: "npm run dev"

    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
      db_migrate:
        condition: service_completed_successfully
    links:
      - db
  node_worker:
    build:
      context: ./nodeApp
      target: development-build-stage
      dockerfile: Dockerfile
    command: "npm run dev:worker"

    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
      db_migrate:
        condition: service_completed_successfully
    links:
      - db
  node_cron:
    build:
      context: ./nodeApp
      target: development-build-stage
      dockerfile: Dockerfile
    command: "npm run dev:cron"

    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
      db_migrate:
        condition: service_completed_successfully
    links:
      - db
  db_migrate:
    build:
      context: ./nodeApp
      target: development-build-stage
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=mysql://root:password@db:3306/chats-challange
    command: "npx prisma migrate deploy"

    depends_on:
      db:
        condition: service_healthy
    links:
      - db
  go_app:
    restart: always
    build: ./golangApp
    depends_on:
      rabbitmq:
        condition: service_healthy
      cache:
        condition: service_healthy
    command: ["/golangApp"]
volumes:
  data:
    driver: local
